@using UniCampaignE.Web.Localization
@using UniCampaignE.Web.HelperLib
@model UniCampaignE.Core.Models.EmailCampaign
<div class="modal-dialog">
    @using (Ajax.BeginForm("Save", "EmailCampaign", new AjaxOptions() { HttpMethod = "POST", LoadingElementId = "loader", OnSuccess = "globalAjaxSuccessHandler", OnFailure = "globalAjaxErrorHandler" }))
    {
        <div class="modal-content">
            <div class="modal-header bg-primary-dark">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@ViewBag.ModalTitle</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizantal" id="email_campaign_form" role="form">
                    <div class="form-group">
                        <label class="control-label col-xs-4">@Comman.NAME_LABEL <span class="error inline">*</span></label>
                        <div class="col-xs-8 col-lg-7">
                            @Html.HiddenFor(mod => mod.Id)
                            @Html.TextBoxFor(mod => mod.Name, new { @class = "form-control", placeholder = Comman.NAME_LABEL })
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Description</label>
                        <div class="col-xs-8 col-lg-7">
                            @Html.TextBoxFor(mod => mod.Description, new { @class = "form-control", placeholder = "Description" })
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Gateway <span class="error inline">*</span></label>
                        <div class="col-xs-8 col-lg-7">
                            @if (Model != null && Model.Gateway != null)
                            {
                                @Html.DropDownListFor(mod => mod.Gateway.Id, new List<SelectListItem>() { new SelectListItem() { Text = Model.Gateway.Name, Value = Model.Gateway.Id.ToString(), Selected = true } }, new { @class = "form-control", id = "gateway_select" })
                            }
                            else
                            {
                                @Html.DropDownListFor(mod => mod.Gateway.Id, new List<SelectListItem>(), new { @class = "form-control", id = "gateway_select" })
                            }
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Status</label>
                        <div class="col-xs-8 col-lg-7">
                            <div id="theCheckbox" class="checkbox c-checkbox mt-sm">
                                <label>
                                    @{string check = "";}
                                    @if (Model != null && Model.Enabled)
                                    {
                                        check = @"checked='checked'";
                                    }
                                    <input type="checkbox" id="emailcheck" @check />
                                    <span class="fa fa-check"></span>@Campaign.ENABLED
                                </label>
                            </div>
                            @Html.Hidden(nameof(Model.Enabled), Model != null && Model.Enabled, new { id = "emailenabled" })

                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Active Hours <span class="error inline">*</span></label> 
                        <div class="col-xs-4 col-lg-3">
                            @Html.TextBoxFor(mod => mod.StartTime, new { @class = "form-control time-picker", id = "start_time_picker" })
                        </div>
                        <span class="col-lg-1 col-xs-1 mt-sm text-bold"> to </span>
                        <div class="col-lg-3 col-xs-4">
                            @Html.TextBoxFor(mod => mod.EndTime, new { @class = "form-control time-picker", id = "end_time_picker" })
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Maximum Batch Size  <span class="error inline">*</span></label>
                        <div class="col-xs-8 col-lg-7">
                            @Html.TextBoxFor(mod => mod.MaximumBatchSize, new { @class = "form-control" })
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">Start Date</label>
                        <div class="col-xs-8 col-lg-7">
                            <div class="input-group date-picker">
                                @if (Model != null && Model.StartDate.HasValue)
                                {
                                    @Html.TextBox(nameof(Model.StartDate), Model.StartDate.Value.ToString("yyyy-MM-dd"), new { @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(mod => mod.StartDate, new { @class = "form-control" })
                                }
                                <span class="input-group-addon" role="button"><i class="icon-calendar"></i></span>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">End Date</label>
                        <div class="col-xs-8 col-lg-7">
                            <div class="input-group date-picker">
                                @if (Model != null && Model.EndDate.HasValue)
                                {
                                    @Html.TextBox(nameof(Model.EndDate), Model.EndDate.Value.ToString("yyyy-MM-dd"), new { @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(mod => mod.EndDate, new { @class = "form-control" })
                                }
                                <span class="input-group-addon" role="button"><i class="icon-calendar"></i></span>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-xs-4">
                            @Campaign.TIME_ZONE
                        </label>
                        <div class="col-xs-8 col-lg-7">
                            @Html.DropDownListFor(mod => mod.TimeZone, DropDownHelper.GetTimeZones(), new { @class = "form-control" })
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">@Comman.CANCEL_BUTTON_TEXT</button>
                    <input type="submit" class="btn btn-primary" id="saveButton" value="@Comman.SAVE_BUTTON_TEXT" />
                </div>
            </div>
        </div>
                                        }
</div>


<script type="text/javascript">
    var timePickerOptions = {
        format: 'HH:mm',
        maxDate: moment('23:59', 'HH:mm'),
        minDate: moment('00:00', 'HH:mm'),
        showClear: true,
        showClose: true,
        toolbarPlacement: 'bottom',
        icons: globalDateTimePickerIcons
    };
    var datePickerOptions = {
        format: 'YYYY-MM-DD',
        useCurrent: true,
        showClear: true,
        showClose: true,
        toolbarPlacement: 'bottom',
        icons: globalDateTimePickerIcons
    };
    $('.time-picker').datetimepicker(timePickerOptions);
    $('.date-picker').datetimepicker(datePickerOptions);
    $('#email_campaign_form').on('change', '#emailcheck', function (e) {
        $('#emailenabled').val($(this).is(':checked'));
    });

    var gatewayListUrl = '@Url.RouteUrl(new { area="",controller=nameof(UniCampaignE.Web.Controllers.EmailConfigController).Replace("Controller",""),action=nameof(UniCampaignE.Web.Controllers.EmailConfigController.ListEmailConfig) })';
    var language = '@System.Globalization.CultureInfo.CurrentCulture.Name';
    var gatewaySelectOptions = {
        language: language,
        placeholder: { text: 'Select Gateway', id: 0 },
        width: '100%',
        theme: 'bootstrap',
        multiple: false,
        allowClear: true,
        ajax: {
            cache: true,
            dataType: 'json',
            url: function (params) {
                var url = gatewayListUrl;
                var q = "";
                var page = params.page || 1;
                q = 'page=' + page;
                q += '&limit=10';
                if (params.term) {
                    q += '&searchString=' + encodeURIComponent(params.term);
                }
                url += "?" + q;
                return url;
            },
            processResults: function (data, params) {
                var obj = {};
                obj.results = data.records.map(function (item) {
                    return {
                        id: item.Id,
                        text: item.Name
                    }
                });
                if (!params.page) {
                    params.page = 1;
                }
                obj.pagination = {
                    more: (10 * params.page) < data.total
                }
                return obj;
            }
        },
        escapeMarkup: function (markup) { return markup; },
        closeOnSelect: true
    };
    $('#gateway_select').select2(gatewaySelectOptions);
    $('#country_select').select2({ width: '100%', language: language, theme: 'bootstrap', closeOnSelect: true });
</script>
